manifest {
  name = 'PacB-flow'
  description = 'PacBio pipeline for genome assembly, polishing and cleanup'
  homePage = 'https://github.com/KristinaGagalova/PacB-flow'
  author = 'Dr. Kristina K. Gagalova'
  mainScript = 'main.nf'
  nextflowVersion = '>=22.03'
  version = "v0.0.1"
}

plugins {
  id 'nf-validation'
}

params {

    // Conda
    enable_conda               = true
    
    // Input output options
    manifest                   = null // samples manifest file   
    outputdir                  = "results"
    genome_size                = '42m'

}

params.custom_config_base = "."
includeConfig("nfcore_custom.config")

includeConfig("conf/modules.config")

conda.enabled = true

process {
    // ALL PROCESSES
    cache        = true
    scratch      = false
    stageInMode  = 'symlink'
    stageOutMode = 'rsync'

    // DEFAULT RESOURCES
    max_cpus         = 8
    memory           = '4.GB'
    max_memory       = '8.GB'
    
    // SPECIFIC RESOURCES
    withLabel: 'small_task' {
	cpus = { check_max( 8 * task.attempt, 'cpus' ) }
        memory = { check_max( 8.GB * task.attempt, 'memory' ) }
        time = { check_max( 1.h * task.attempt, 'time' ) }
    }

    withLabel: 'medium_task' {
	cpus = { check_max( 24 * task.attempt, 'cpus' ) }
        memory = { check_max( 24.GB * task.attempt, 'memory' ) }
        time = { check_max( 12.h * task.attempt, 'time' ) }
    }

    withLabel: 'large_task' {
	cpus = { check_max( 24 * task.attempt, 'cpus' ) }
        memory = { check_max( 200.GB * task.attempt, 'memory' ) }
        time = { check_max( 24.h * task.attempt, 'time' ) }
    }

}

// Function to ensure that resource requirements don't go beyond
// a maximum limit
def check_max(obj, type) {
  if (type == 'memory') {
    try {
      if (obj.compareTo(params.max_memory as nextflow.util.MemoryUnit) == 1)
        return params.max_memory as nextflow.util.MemoryUnit
      else
        return obj
    } catch (all) {
      println "   ### ERROR ###   Max memory '${params.max_memory}' is not valid! Using default value: $obj"
      return obj
    }
  } else if (type == 'time') {
    try {
      if (obj.compareTo(params.max_time as nextflow.util.Duration) == 1)
        return params.max_time as nextflow.util.Duration
      else
        return obj
    } catch (all) {
      println "   ### ERROR ###   Max time '${params.max_time}' is not valid! Using default value: $obj"
      return obj
    }
  } else if (type == 'cpus') {
    try {
      return Math.min( obj, params.max_cpus as int )
    } catch (all) {
      println "   ### ERROR ###   Max cpus '${params.max_cpus}' is not valid! Using default value: $obj"
      return obj
    }
  }
}
